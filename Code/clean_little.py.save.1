# -*- coding: utf-8 -*-
"""
Created on Sat Apr  6 23:20:17 2019

@author: nari9
"""

# -*- coding: utf-8 -*-
"""
Created on Sun Mar 31 20:10:00 2019

@author: nari9
"""
#import pickle
import time
import numpy as np
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from joblib import dump, load
#import queue
from collections import Counter
import os
from sklearn.metrics import accuracy_score
import RPi.GPIO as GPIO
model = load('svmModel.joblib')
GPIO.setmode(GPIO.BCM)
scalerModel = load('scalerModel.joblib')
#inc_data = pd.read_csv('C:\\Users\\nari9\\Documents\\Mechalimb\\Data8Channels\\S1-Delsys-15Class\\R_R1.csv',header=None)
#vote_list = [i for i in range(0,15)]
print ("Loaded Libraries")
def mav(col):
    val = 0.0
    
    for ele in col:
        val +=np.absolute(ele)
        
    val = val/len(col)
    return val

def wl(col):
    val = 0.0
    col = col.values
    for i in range(1,len(col)):
        val +=np.absolute(col[i] - col[i-1])
    return val

def var(col):
    return np.var(col)

def ssc(col):
    
    val = 0
    
    for i in range(1,len(col)):
        if col[i-1]<0 and col[i]>0:
            val = val+1
        elif col[i-1]>0 and col[i]<0:
            val = val+1
    return val

def rms(col):
    
    col = col.values
    return np.sqrt(np.mean(col**2))

def first_order_diff(X):
    """ Compute the first order difference of a time series.

        For a time series X = [x(1), x(2), ... , x(N)], its first order 
        difference is:
        Y = [x(2) - x(1) , x(3) - x(2), ..., x(N) - x(N-1)]
        
    """
    D=[]
    
    for i in range(1,len(X)):
        D.append(X[i]-X[i-1])

    return D

def hjorth(X, D = None):
    """ Compute Hjorth mobility and complexity of a time series from either two 
    cases below:
        1. X, the time series of type list (default)
        2. D, a first order differential sequence of X (if D is provided, 
           recommended to speed up)

    In case 1, D is computed by first_order_diff(X) function of pyeeg

    Notes
    -----
    To speed up, it is recommended to compute D before calling this function 
    because D may also be used by other functions whereas computing it here 
    again will slow down.

    Parameters
    ----------

    X
        list
        
        a time series
    
    D
        list
    
        first order differential sequence of a time series

    Returns
    -------

    As indicated in return line

    Hjorth mobility and complexity

    """
    
    if D is None:
        D = first_order_diff(X)

    D.insert(0, X[0]) # pad the first difference
    D = np.array(D)

    n = len(X)

    M2 = float(sum(D ** 2)) / n
    TP = np.sum(np.array(X) ** 2)
    M4 = 0;
    for i in range(1, len(D)):
        M4 += (D[i] - D[i - 1]) ** 2
    M4 = M4 / n
    
    return np.sqrt(M2 / TP), np.sqrt(float(M4) * TP / M2 / M2)

def extract_features(df):

    inputs = [];
    df = df.reset_index(drop=True)
    val1 = mav(df.iloc[:,0].T)
    #print (val1)
    val2 = mav(df.iloc[:,1].T)
    val3 = mav(df.iloc[:,2].T)
    val4 = mav(df.iloc[:,3].T)
    val5 = mav(df.iloc[:,4].T)
    val6 = mav(df.iloc[:,5].T)
    val7 = mav(df.iloc[:,6].T)
    val8 = mav(df.iloc[:,7].T)
    
    '''
    
    inputs['ch1MAV'] = val1
    inputs['ch2MAV'] = val2
    inputs['ch3MAV'] = val3
    inputs['ch4MAV'] = val4
    inputs['ch5MAV'] = val5
    inputs['ch6MAV'] = val6
    inputs['ch7MAV'] = val7
    inputs['ch8MAV'] = val8
    '''
    inputs.append(val1)
    inputs.append(val2)
    inputs.append(val3)

